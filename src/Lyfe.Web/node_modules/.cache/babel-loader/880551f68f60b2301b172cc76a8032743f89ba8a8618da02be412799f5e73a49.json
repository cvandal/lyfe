{"ast":null,"code":"export function dateFormatter(d) {\n  const date = new Date(d);\n  const month = date.toLocaleDateString(\"en-AU\", {\n    month: \"short\"\n  }); // Jan\n  const day = date.toLocaleDateString(\"en-AU\", {\n    day: \"2-digit\"\n  }); // 01\n\n  return `${month} ${day}`; // Jan 01\n}\n\nexport function dataFormatter(d) {\n  return d.map(w => ({\n    \"Date\": dateFormatter(w.currentDate),\n    \"Weight\": w.currentWeight,\n    \"Goal Weight\": w.goalWeight\n  }));\n}\nexport function latestRecord(d) {\n  return d.at(-1); // Get the last element from the array\n}\n\nexport function recordExists(d) {\n  const latest = latestRecord(d);\n  const currentDate = new Date();\n  return dateFormatter(latest.currentDate) === dateFormatter(currentDate);\n}\nexport async function updateRecord(id, currentDate, currentWeight, goalWeight) {\n  const weight = {\n    id: id,\n    currentDate: currentDate,\n    currentWeight: currentWeight,\n    goalWeight: goalWeight\n  };\n  return await fetch(`http://localhost:5000/api/weight/${id}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(weight)\n  });\n}\nexport async function createRecord(currentDate, currentWeight, goalWeight) {\n  const weight = {\n    currentDate: currentDate,\n    currentWeight: currentWeight,\n    goalWeight: goalWeight\n  };\n  return await fetch(\"http://localhost:5000/api/weight\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(weight)\n  });\n}","map":{"version":3,"names":["dateFormatter","d","date","Date","month","toLocaleDateString","day","dataFormatter","map","w","currentDate","currentWeight","goalWeight","latestRecord","at","recordExists","latest","updateRecord","id","weight","fetch","method","headers","body","JSON","stringify","createRecord"],"sources":["/home/chris/repos/lyfe/src/Lyfe.Web/src/Helpers/WeightHelpers.tsx"],"sourcesContent":["import { Weight } from \"../Interfaces/Weight\";\n\nexport function dateFormatter(d: Date) {\n  const date = new Date(d);\n  const month = date.toLocaleDateString(\"en-AU\", { month: \"short\" }); // Jan\n  const day = date.toLocaleDateString(\"en-AU\", { day: \"2-digit\" }); // 01\n\n  return `${month} ${day}`; // Jan 01\n}\n\nexport function dataFormatter(d: Weight[]) {\n  return d.map((w) => ({\n    \"Date\": dateFormatter(w.currentDate),\n    \"Weight\": w.currentWeight,\n    \"Goal Weight\": w.goalWeight\n  }));\n}\n\nexport function latestRecord(d: Weight[]) {\n  return d.at(-1); // Get the last element from the array\n}\n\nexport function recordExists(d: Weight[]) {\n  const latest = latestRecord(d)!;\n  const currentDate = new Date();\n\n  return dateFormatter(latest.currentDate) === dateFormatter(currentDate);\n}\n\nexport async function updateRecord(id: number | undefined, currentDate: Date, currentWeight: number, goalWeight: number) {\n  const weight: Weight = {\n    id: id,\n    currentDate: currentDate,\n    currentWeight: currentWeight,\n    goalWeight: goalWeight\n  };\n\n  return await fetch(`http://localhost:5000/api/weight/${id}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(weight)\n  });\n}\n\nexport async function createRecord(currentDate: Date, currentWeight: number, goalWeight: number) {\n  const weight: Weight = {\n    currentDate: currentDate,\n    currentWeight: currentWeight,\n    goalWeight: goalWeight\n  };\n\n  return await fetch(\"http://localhost:5000/api/weight\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(weight),\n  });\n}\n"],"mappings":"AAEA,OAAO,SAASA,aAAaA,CAACC,CAAO,EAAE;EACrC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,CAAC,CAAC;EACxB,MAAMG,KAAK,GAAGF,IAAI,CAACG,kBAAkB,CAAC,OAAO,EAAE;IAAED,KAAK,EAAE;EAAQ,CAAC,CAAC,CAAC,CAAC;EACpE,MAAME,GAAG,GAAGJ,IAAI,CAACG,kBAAkB,CAAC,OAAO,EAAE;IAAEC,GAAG,EAAE;EAAU,CAAC,CAAC,CAAC,CAAC;;EAElE,OAAQ,GAAEF,KAAM,IAAGE,GAAI,EAAC,CAAC,CAAC;AAC5B;;AAEA,OAAO,SAASC,aAAaA,CAACN,CAAW,EAAE;EACzC,OAAOA,CAAC,CAACO,GAAG,CAAEC,CAAC,KAAM;IACnB,MAAM,EAAET,aAAa,CAACS,CAAC,CAACC,WAAW,CAAC;IACpC,QAAQ,EAAED,CAAC,CAACE,aAAa;IACzB,aAAa,EAAEF,CAAC,CAACG;EACnB,CAAC,CAAC,CAAC;AACL;AAEA,OAAO,SAASC,YAAYA,CAACZ,CAAW,EAAE;EACxC,OAAOA,CAAC,CAACa,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA,OAAO,SAASC,YAAYA,CAACd,CAAW,EAAE;EACxC,MAAMe,MAAM,GAAGH,YAAY,CAACZ,CAAC,CAAE;EAC/B,MAAMS,WAAW,GAAG,IAAIP,IAAI,EAAE;EAE9B,OAAOH,aAAa,CAACgB,MAAM,CAACN,WAAW,CAAC,KAAKV,aAAa,CAACU,WAAW,CAAC;AACzE;AAEA,OAAO,eAAeO,YAAYA,CAACC,EAAsB,EAAER,WAAiB,EAAEC,aAAqB,EAAEC,UAAkB,EAAE;EACvH,MAAMO,MAAc,GAAG;IACrBD,EAAE,EAAEA,EAAE;IACNR,WAAW,EAAEA,WAAW;IACxBC,aAAa,EAAEA,aAAa;IAC5BC,UAAU,EAAEA;EACd,CAAC;EAED,OAAO,MAAMQ,KAAK,CAAE,oCAAmCF,EAAG,EAAC,EAAE;IAC3DG,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,MAAM;EAC7B,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeO,YAAYA,CAAChB,WAAiB,EAAEC,aAAqB,EAAEC,UAAkB,EAAE;EAC/F,MAAMO,MAAc,GAAG;IACrBT,WAAW,EAAEA,WAAW;IACxBC,aAAa,EAAEA,aAAa;IAC5BC,UAAU,EAAEA;EACd,CAAC;EAED,OAAO,MAAMQ,KAAK,CAAC,kCAAkC,EAAE;IACrDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,MAAM;EAC7B,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}