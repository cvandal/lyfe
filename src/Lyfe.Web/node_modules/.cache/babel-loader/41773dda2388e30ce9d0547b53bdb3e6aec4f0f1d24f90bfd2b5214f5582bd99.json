{"ast":null,"code":"export function dateFormatter(d) {\n  const date = new Date(d);\n  const month = date.toLocaleDateString(\"en-AU\", {\n    month: \"short\"\n  }); // Jan\n  const day = date.toLocaleDateString(\"en-AU\", {\n    day: \"2-digit\"\n  }); // 01\n\n  return `${month} ${day}`; // Jan 01\n}\n\nexport function dataFormatter(w) {\n  return w.map(weight => ({\n    \"Date\": dateFormatter(weight.currentDate),\n    \"Weight\": weight.currentWeight,\n    \"Goal Weight\": weight.goalWeight\n  }));\n}\nexport function latestRecord(w) {\n  return w.at(-1); // Get the last element from the array\n}\n\nexport function minValue(w) {\n  return Math.min(...w.map(weight => weight.goalWeight)) - 2;\n  ;\n}\nexport function maxValue(w) {\n  return Math.max(...w.map(weight => weight.currentWeight)) + 2;\n}\nexport function diff(w) {\n  return (latestRecord(w).currentWeight - latestRecord(w).goalWeight).toFixed(2);\n}","map":{"version":3,"names":["dateFormatter","d","date","Date","month","toLocaleDateString","day","dataFormatter","w","map","weight","currentDate","currentWeight","goalWeight","latestRecord","at","minValue","Math","min","maxValue","max","diff","toFixed"],"sources":["/home/chris/repos/lyfe/src/Lyfe.Web/src/Helpers/WeightTrackerHelpers.tsx"],"sourcesContent":["import { Weight } from \"../Interfaces/Weight\";\n\nexport function dateFormatter(d: Date) {\n  const date = new Date(d);\n  const month = date.toLocaleDateString(\"en-AU\", { month: \"short\" }); // Jan\n  const day = date.toLocaleDateString(\"en-AU\", { day: \"2-digit\" }); // 01\n\n  return `${month} ${day}`; // Jan 01\n}\n\nexport function dataFormatter(w: Weight[]) {\n  return w.map((weight) => ({\n    \"Date\": dateFormatter(weight.currentDate),\n    \"Weight\": weight.currentWeight,\n    \"Goal Weight\": weight.goalWeight\n  }));\n}\n\nexport function latestRecord(w: Weight[]) {\n  return w.at(-1); // Get the last element from the array\n}\n\nexport function minValue(w: Weight[]) {\n  return Math.min(...w.map((weight) => weight.goalWeight)) - 2;;\n}\n\nexport function maxValue(w: Weight[]) {\n  return Math.max(...w.map((weight) => weight.currentWeight)) + 2;\n}\n\nexport function diff(w: Weight[]) {\n  return (latestRecord(w)!.currentWeight - latestRecord(w)!.goalWeight).toFixed(2);\n}\n"],"mappings":"AAEA,OAAO,SAASA,aAAaA,CAACC,CAAO,EAAE;EACrC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,CAAC,CAAC;EACxB,MAAMG,KAAK,GAAGF,IAAI,CAACG,kBAAkB,CAAC,OAAO,EAAE;IAAED,KAAK,EAAE;EAAQ,CAAC,CAAC,CAAC,CAAC;EACpE,MAAME,GAAG,GAAGJ,IAAI,CAACG,kBAAkB,CAAC,OAAO,EAAE;IAAEC,GAAG,EAAE;EAAU,CAAC,CAAC,CAAC,CAAC;;EAElE,OAAQ,GAAEF,KAAM,IAAGE,GAAI,EAAC,CAAC,CAAC;AAC5B;;AAEA,OAAO,SAASC,aAAaA,CAACC,CAAW,EAAE;EACzC,OAAOA,CAAC,CAACC,GAAG,CAAEC,MAAM,KAAM;IACxB,MAAM,EAAEV,aAAa,CAACU,MAAM,CAACC,WAAW,CAAC;IACzC,QAAQ,EAAED,MAAM,CAACE,aAAa;IAC9B,aAAa,EAAEF,MAAM,CAACG;EACxB,CAAC,CAAC,CAAC;AACL;AAEA,OAAO,SAASC,YAAYA,CAACN,CAAW,EAAE;EACxC,OAAOA,CAAC,CAACO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA,OAAO,SAASC,QAAQA,CAACR,CAAW,EAAE;EACpC,OAAOS,IAAI,CAACC,GAAG,CAAC,GAAGV,CAAC,CAACC,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACG,UAAU,CAAC,CAAC,GAAG,CAAC;EAAC;AAC/D;AAEA,OAAO,SAASM,QAAQA,CAACX,CAAW,EAAE;EACpC,OAAOS,IAAI,CAACG,GAAG,CAAC,GAAGZ,CAAC,CAACC,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACE,aAAa,CAAC,CAAC,GAAG,CAAC;AACjE;AAEA,OAAO,SAASS,IAAIA,CAACb,CAAW,EAAE;EAChC,OAAO,CAACM,YAAY,CAACN,CAAC,CAAC,CAAEI,aAAa,GAAGE,YAAY,CAACN,CAAC,CAAC,CAAEK,UAAU,EAAES,OAAO,CAAC,CAAC,CAAC;AAClF"},"metadata":{},"sourceType":"module","externalDependencies":[]}